package serie2;import java.awt.*;import java.awt.event.*;import java.io.BufferedInputStream;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.io.OutputStreamWriter;import java.io.PrintWriter;import java.net.Socket;import java.net.UnknownHostException;import java.util.Scanner;import javax.swing.*;/** *  * @author abdoulaye * */public class ChatUserImpl {    private String title = "Logiciel de discussion en ligne";    private String pseudo = null;    private JFrame window = new JFrame(this.title);    private JTextArea txtOutput = new JTextArea();    private JTextField txtMessage = new JTextField();    private JButton btnSend = new JButton("Envoyer");    private SocketDuClient socketDuClient;    private int portServeur;    private String hostServeur;        PrintWriter out;	BufferedReader in;    public ChatUserImpl(String host, int port) {    	this.hostServeur = host;    	this.portServeur = port;        this.createIHM();        this.requestPseudo();        this.seConnecter();    }    public void createIHM() {        // Assemblage des composants        JPanel panel = (JPanel)this.window.getContentPane();        JScrollPane sclPane = new JScrollPane(this.txtOutput);        panel.add(sclPane, BorderLayout.CENTER);        JPanel southPanel = new JPanel(new BorderLayout());        southPanel.add(this.txtMessage, BorderLayout.CENTER);        southPanel.add(this.btnSend, BorderLayout.EAST);        panel.add(southPanel, BorderLayout.SOUTH);        // Gestion des évènements        window.addWindowListener(new WindowAdapter() {            public void windowClosing(WindowEvent e) {                window_windowClosing(e);            }        });        btnSend.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent e) {                btnSend_actionPerformed(e);            }        });        txtMessage.addKeyListener(new KeyAdapter() {        	public void keyReleased(KeyEvent event) {        		if (event.getKeyChar() == '\n')        			btnSend_actionPerformed(null);        	}        });        // Initialisation des attributs        this.txtOutput.setBackground(new Color(220,220,220));        this.txtOutput.setEditable(false);        this.window.setSize(500,400);        this.window.setVisible(true);        this.txtMessage.requestFocus();    }    //authentification    public void requestPseudo() {        this.pseudo = JOptionPane.showInputDialog(                this.window, "Entrez votre pseudo : ",                this.title,  JOptionPane.OK_OPTION        );        if (this.pseudo == null) System.exit(0);            }    public void window_windowClosing(WindowEvent e) {    	//arreter la connexion    	this.seDeconnecter();    	    	System.exit(-1);    }    public void btnSend_actionPerformed(ActionEvent e) {    	this.txtOutput.append("-> moi: "+this.txtMessage.getText() + "\n");    	    	//envoyer le message du serveur    	if( this.socketDuClient.getSocket() != null)    		this.socketDuClient.envoyerMsg(this.pseudo+": "+txtMessage.getText());    	    	this.txtMessage.setText("");        this.txtMessage.requestFocus();            }               /**     * se connecter au serveur     */    public void seConnecter(){    	this.socketDuClient = new SocketDuClient(this.hostServeur, this.portServeur);    }    /**     * Se deconnecter du serveur     */    public void seDeconnecter(){    	this.socketDuClient.arreter();    	    	try {			this.in.close();			this.out.flush();			this.out.close();		} catch (IOException e) {		}    }        /**     *      * @author abdoulaye     *     */    class SocketDuClient{    	private Socket socket;          private Recepteur recepteur;    	private boolean arret;    	    	public SocketDuClient(String host, int port){    		try{    			    			this.socket = new Socket(host, port);    			System.out.println("Connexion bien etable "+port);    			out = new PrintWriter(this.socket.getOutputStream(), true);    			in = new BufferedReader(new InputStreamReader(this.socket.getInputStream()));    			this.recepteur = new Recepteur();    			this.arret = false;    			this.demarrer();    			    		}     		catch (UnknownHostException e) {    			JOptionPane.showMessageDialog(ChatUserImpl.this.window, "Vous n'est pas connecte à un serveur! Veuillez demarrer le serveur!");    			System.exit(-1);}    		catch (IOException e) {    			JOptionPane.showMessageDialog(ChatUserImpl.this.window, "Vous n'est pas connecte à un serveur! Veuillez demarrer le serveur!");    			System.exit(-1);}    		    		    	}    	    	public void envoyerMsg(String msg){    		try{    			out.println(msg);    			out.flush();    		}catch(Exception e){    			JOptionPane.showMessageDialog(ChatUserImpl.this.window, "Vous n'est pas connecte à un serveur! Veuillez demarrer le serveur!");    			System.exit(-1);    		}    	}    	    	public void demarrer(){    		this.envoyerMsg(pseudo);    		this.recepteur.start();    	}    	    	public boolean statut(){    		return this.arret;    	}    	    	public void arreter(){    		try {    			//envoyer ARRET    			this.envoyerMsg("Deconnexion de "+pseudo);    			out.flush();    			out.close();    			in.close();    			this.socket.close();    		} catch (IOException e) {}    	}    	    	public Socket getSocket(){    		return this.socket;    	}    	public void setSocket(Socket sok){    		this.socket = sok;    	}	    	    }        /**     * Classe pour recevoir les messages du serveur     * @author abdoulaye     *     */    class Recepteur extends Thread{    	    	public Recepteur(){    		super();    	}    	    	public void run(){    		String res = "";    		while(true){    			try {					if(in.ready()){						res = in.readLine();												txtOutput.append(""+res + "\n");											}									} catch (IOException e) {					socketDuClient.arreter();				}    		}    	}    	    }}